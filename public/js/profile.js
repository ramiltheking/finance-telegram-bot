const TokenCSRF = document.querySelector('meta[name="csrf-token"]').content;
const tg = window.Telegram.WebApp;
tg.expand();

const user = tg.initDataUnsafe?.user;

if (user) {
    document.getElementById('userPhoto').src = user.photo_url;
    document.getElementById('username').textContent = '@' + (user.username || '–ë–µ–∑ –Ω–∏–∫–∞');
    document.getElementById('fullname').textContent = (user.first_name || '') + ' ' + (user.last_name || '');
    document.getElementById('telegramId').textContent = "ID: " + user.id;
}

fetch('/miniapp/profile/data', {
    method: 'POST',
    headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'X-CSRF-TOKEN': TokenCSRF
    },
    body: JSON.stringify({
        initData: tg.initData
    })
})
    .then(res => res.json())
    .then(data => {
        let html = '';
        switch (data.status) {
            case 'trial':
                html = `<h3>‚è≥ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥</h3><p>–ê–∫—Ç–∏–≤–µ–Ω –¥–æ <b>${data.trial_ends_at}</b></p>`;
                break;
            case 'active':
                html = `<h3>üí≥ –ü–æ–¥–ø–∏—Å–∫–∞</h3><p>–ê–∫—Ç–∏–≤–Ω–∞ –¥–æ <b>${data.subscription_ends_at}</b></p>`;
                break;
            case 'expired':
                html = `<h3>‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å</h3><a href="/miniapp/tarifs" class="pay-btn">–û–ø–ª–∞—Ç–∏—Ç—å</a>`;
                break;
            default:
                html = `<h3>‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</h3><a href="/miniapp/tarifs" class="pay-btn">–û—Ñ–æ—Ä–º–∏—Ç—å</a>`;
        }
        document.getElementById('subscription').innerHTML = html;

        if (data.emptyPayments) {
            document.getElementById('payments').innerHTML = `<p class="message">${data.messagePayments}</p>`;
        } else {
            document.getElementById('payments').innerHTML = data.payments.map(p => `
                <div class="list-item">
                    ID: ${p.inv_id} <span>${p.amount} (${p.status})</span>
                </div>
            `).join('');
        }
    });

document.getElementById("deleteUserBtn").addEventListener("click", function () {
    Swal.fire({
        title: "–£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ?",
        text: "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!",
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#d33",
        cancelButtonColor: "#3085d6",
        confirmButtonText: "–î–∞, —É–¥–∞–ª–∏—Ç—å",
        cancelButtonText: "–û—Ç–º–µ–Ω–∞"
    }).then((result) => {
        if (result.isConfirmed) {
            fetch("/miniapp/profile/delete", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    'Accept': 'application/json',
                    "X-CSRF-TOKEN": TokenCSRF
                },
                body: JSON.stringify({})
            })
                .then(res => res.json())
                .then(data => {
                    if (data.success) {
                        Swal.fire({
                            title: "‚úÖ –£—Å–ø–µ—Ö!",
                            text: "–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã",
                            icon: "success",
                            confirmButtonText: "–û–∫"
                        }).then(() => {
                            location.href = "/miniapp";
                        });
                    } else {
                        Swal.fire({
                            title: "‚ùå –û—à–∏–±–∫–∞",
                            text: data.message || "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",
                            icon: "error",
                            confirmButtonText: "–û–∫"
                        });
                    }
                })
                .catch(err => {
                    console.error(err);
                    Swal.fire({
                        title: "‚ö†Ô∏è –û—à–∏–±–∫–∞",
                        text: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö",
                        icon: "error",
                        confirmButtonText: "–û–∫"
                    });
                });
        }
    });
});

