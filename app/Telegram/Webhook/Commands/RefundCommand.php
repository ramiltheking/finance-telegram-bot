<?php

namespace App\Telegram\Webhook\Commands;

use App\Facades\Telegram;
use App\Models\TelegramPayment;
use App\Models\User;
use App\Telegram\Webhook\Webhook;
use Illuminate\Support\Facades\Log;

class RefundCommand extends Webhook
{
    public function run()
    {
        $messageFromDev = $this->request->input('message.from.id') == env('TELEGRAM_DEV_CHAT');

        if (!$messageFromDev) {
            Telegram::message($this->chat_id, "–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –º–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —á–µ—Ä–µ–∑ –ø–æ–¥–¥–µ—Ä–∂–∫—É –±–æ—Ç–∞. –ù–∞–ø–∏—à–∏ –Ω–∞–º —Å –ø—Ä–æ–∑—å–±–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–Ω—ã–º —Å—á–µ—Ç–æ–º –æ–ø–ª–∞—Ç—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")->send();
            return;
        }

        $messageText = $this->request->input('message.text');

        $params = $this->parseSimpleFormat($messageText);

        if (!$params) {
            Telegram::message($this->chat_id, $this->getUsageHelp())->send();
            return;
        }

        try {
            $payment = TelegramPayment::where('telegram_payment_charge_id', $params['charge_id'])
                ->whereHas('user', function ($query) use ($params) {
                    $query->where('telegram_id', $params['user_id']);
                })
                ->first();

            if (!$payment) {
                Telegram::message($this->chat_id, "‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.\nUser ID: {$params['user_id']}\nCharge ID: {$params['charge_id']}")->send();
                return;
            }

            if ($payment->status === 'refunded') {
                Telegram::message($this->chat_id, "‚ö†Ô∏è –≠—Ç–æ—Ç –ø–ª–∞—Ç–µ–∂ —É–∂–µ –±—ã–ª –≤–æ–∑–≤—Ä–∞—â–µ–Ω —Ä–∞–Ω–µ–µ.")->send();
                return;
            }

            $response = Telegram::refundPaymentByModel($payment);

            if ($response['ok']) {
                $payment->update(['status' => 'refunded']);

                $user = $payment->user;
                $user->update([
                    'subscription_status' => 'expired',
                    'subscription_ends_at' => now(),
                ]);

                Log::info('Payment refunded successfully', [
                    'payment_id' => $payment->id,
                    'user_id' => $user->telegram_id,
                    'charge_id' => $params['charge_id']
                ]);

                $message = "‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω!\n\n";
                $message .= "üí≥ –°—É–º–º–∞: {$payment->amount} {$payment->currency}\n";
                $message .= "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {$user->first_name}";
                $message .= $user->username ? " (@{$user->username})" : "";
                $message .= "\nüÜî Charge ID: {$params['charge_id']}";

                Telegram::message($this->chat_id, $message)->send();

                Telegram::message($user->telegram_id, "üí∞ –í–∞—à –ø–ª–∞—Ç–µ–∂ –±—ã–ª –≤–æ–∑–≤—Ä–∞—â–µ–Ω. –ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")->send();
            } else {
                $errorMessage = $response['description'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
                Log::error('–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞: ', [
                    'user_id' => $params['user_id'],
                    'charge_id' => $params['charge_id'],
                    'error' => $errorMessage
                ]);
                Telegram::message($this->chat_id, "‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: {$errorMessage}")->send();
            }
        } catch (\Exception $e) {
            Log::error('–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤–æ–∑–≤—Ä–∞—Ç–∞: ', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            Telegram::message($this->chat_id, "‚ùå –û—à–∏–±–∫–∞: " . $e->getMessage())->send();
        }
    }

    private function parseSimpleFormat(string $messageText): ?array
    {
        $parts = explode(' ', $messageText);

        array_shift($parts);

        if (count($parts) < 2) {
            return null;
        }

        $user_id = trim($parts[0]);
        $charge_id = trim($parts[1]);

        if (!is_numeric($user_id) || empty($charge_id)) {
            return null;
        }

        return [
            'user_id' => (int)$user_id,
            'charge_id' => $charge_id
        ];
    }

    private function getUsageHelp(): string
    {
        return "üí∞ –í–æ–∑–≤—Ä–∞—Ç –ø–ª–∞—Ç–µ–∂–∞\n\n" .
            "üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n" .
            "/refund [user_id] [charge_id]\n\n" .
            "–ì–¥–µ:\n" .
            "- user_id - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ)\n" .
            "- charge_id - ID –ø–ª–∞—Ç–µ–∂–∞ Stars\n\n" .
            "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–æ–±—Ä–∞—Ç–∏–º–∞!";
    }
}
